import React, { useState, useEffect, useRef } from 'react'
import Layout from '../layout/Layout'
import './ChatbotPage.css'

const ChatbotPage = () => {
  // ===== STATE MANAGEMENT =====
  const [messages, setMessages] = useState([])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef(null)

  // ===== SAMPLE DATA & MOCK RESPONSES - THAY ƒê·ªîI D·ªÆ LI·ªÜU TH·∫¨T T·∫†I ƒê√ÇY =====
  // ƒê·ªÉ thay ƒë·ªïi d·ªØ li·ªáu th·∫≠t, ch·ªâ c·∫ßn:
  // 1. Thay ƒë·ªïi URL API ·ªü d√≤ng 25 trong h√†m sendMessage()
  // 2. C·∫≠p nh·∫≠t c·∫•u tr√∫c d·ªØ li·ªáu request/response n·∫øu c·∫ßn
  // 3. D·ªØ li·ªáu m·∫´u hi·ªán t·∫°i s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng d·ªØ li·ªáu t·ª´ API th·∫≠t

  const sampleResponses = [
    "Xin ch√†o! T√¥i l√† AI assistant c·ªßa LeafSense. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch b·ªánh c√¢y tr·ªìng, t∆∞ v·∫•n chƒÉm s√≥c c√¢y, v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ n√¥ng nghi·ªáp. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?",
    "ƒê·ªÉ ph√¢n t√≠ch b·ªánh c√¢y tr·ªìng, b·∫°n c√≥ th·ªÉ upload h√¨nh ·∫£nh l√° c√¢y b·ªã b·ªánh l√™n h·ªá th·ªëng. T√¥i s·∫Ω gi√∫p b·∫°n x√°c ƒë·ªãnh lo·∫°i b·ªánh v√† ƒë∆∞a ra ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã ph√π h·ª£p.",
    "C√°c lo·∫°i b·ªánh ph·ªï bi·∫øn ·ªü c√¢y c√† ph√™ bao g·ªìm: b·ªánh g·ªâ s·∫Øt, b·ªánh kh√¥ c√†nh, b·ªánh th·ªëi r·ªÖ. M·ªói lo·∫°i b·ªánh c√≥ tri·ªáu ch·ª©ng v√† c√°ch ƒëi·ªÅu tr·ªã kh√°c nhau.",
    "ƒê·ªÉ chƒÉm s√≥c c√¢y c√† ph√™ t·ªët, b·∫°n c·∫ßn: t∆∞·ªõi n∆∞·ªõc ƒë·ªÅu ƒë·∫∑n, b√≥n ph√¢n c√¢n ƒë·ªëi, c·∫Øt t·ªâa c√†nh th∆∞·ªùng xuy√™n, v√† ph√≤ng tr·ª´ s√¢u b·ªánh k·ªãp th·ªùi.",
    "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n x√°c ƒë·ªãnh c√°c lo·∫°i s√¢u b·ªánh h·∫°i c√¢y tr·ªìng th√¥ng qua h√¨nh ·∫£nh. B·∫°n c√≥ mu·ªën upload ·∫£nh ƒë·ªÉ t√¥i ph√¢n t√≠ch kh√¥ng?",
    "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng LeafSense! N·∫øu c√≥ th√™m c√¢u h·ªèi g√¨, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi t√¥i nh√©."
  ]

  const quickQuestions = [
    "C√°ch ph√¢n t√≠ch b·ªánh c√¢y tr·ªìng?",
    "B·ªánh ph·ªï bi·∫øn ·ªü c√¢y c√† ph√™?",
    "C√°ch chƒÉm s√≥c c√¢y c√† ph√™?",
    "Ph√≤ng tr·ª´ s√¢u b·ªánh nh∆∞ th·∫ø n√†o?",
    "T∆∞ v·∫•n ph√¢n b√≥n cho c√¢y tr·ªìng"
  ]

  // ===== API INTEGRATION - THAY ƒê·ªîI URL API T·∫†I ƒê√ÇY =====
  const sendMessage = async (message) => {
    try {
      setIsLoading(true)
      setIsTyping(true)

      // THAY ƒê·ªîI URL API C·ª¶A B·∫†N T·∫†I ƒê√ÇY
      const response = await fetch('/api/chatbot', { // <-- Thay ƒë·ªïi URL API
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          // Th√™m headers kh√°c n·∫øu c·∫ßn (Authorization, API Key, etc.)
        },
        body: JSON.stringify({
          message: message,
          // Th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu API y√™u c·∫ßu:
          // user_id: currentUser.id,
          // session_id: sessionId,
          // context: previousMessages
        })
      })

      if (!response.ok) {
        throw new Error('Failed to send message')
      }

      const data = await response.json()
      
      // MAPPING D·ªÆ LI·ªÜU API - ƒêI·ªÄU CH·ªàNH N·∫æU C·∫§U TR√öC KH√ÅC
      const botResponse = {
        id: Date.now() + 1,
        text: data.response || data.message || data.answer, // <-- ƒêi·ªÅu ch·ªânh t√™n tr∆∞·ªùng
        sender: 'bot',
        timestamp: new Date().toISOString(),
        // Th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu API tr·∫£ v·ªÅ:
        // confidence: data.confidence,
        // suggestions: data.suggestions,
        // related_topics: data.related_topics
      }

      setMessages(prev => [...prev, botResponse])
      
    } catch (error) {
      console.error('Error sending message:', error)
      
      // FALLBACK V·ªÄ D·ªÆ LI·ªÜU M·∫™U N·∫æU API L·ªñI
      const randomResponse = sampleResponses[Math.floor(Math.random() * sampleResponses.length)]
      const botResponse = {
        id: Date.now() + 1,
        text: randomResponse,
        sender: 'bot',
        timestamp: new Date().toISOString()
      }
      
      setMessages(prev => [...prev, botResponse])
    } finally {
      setIsLoading(false)
      setIsTyping(false)
    }
  }

  // ===== MESSAGE FUNCTIONS =====
  const handleSendMessage = async (e) => {
    e.preventDefault()
    
    if (!inputMessage.trim()) return

    const userMessage = {
      id: Date.now(),
      text: inputMessage,
      sender: 'user',
      timestamp: new Date().toISOString()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')

    // G·ª≠i tin nh·∫Øn ƒë·∫øn API
    await sendMessage(inputMessage)
  }

  const handleQuickQuestion = (question) => {
    setInputMessage(question)
  }

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage(e)
    }
  }

  // ===== AUTO SCROLL =====
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // ===== INITIAL MESSAGE =====
  useEffect(() => {
    const welcomeMessage = {
      id: 1,
      text: "Xin ch√†o! T√¥i l√† AI assistant c·ªßa LeafSense. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch b·ªánh c√¢y tr·ªìng, t∆∞ v·∫•n chƒÉm s√≥c c√¢y, v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ n√¥ng nghi·ªáp. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?",
      sender: 'bot',
      timestamp: new Date().toISOString()
    }
    setMessages([welcomeMessage])
  }, [])

  // ===== RENDER MESSAGE =====
  const renderMessage = (message) => {
    const isUser = message.sender === 'user'
    const time = new Date(message.timestamp).toLocaleTimeString('vi-VN', {
      hour: '2-digit',
      minute: '2-digit'
    })

    return (
      <div key={message.id} className={`message ${isUser ? 'user-message' : 'bot-message'}`}>
        <div className="message-content">
          <div className="message-text">{message.text}</div>
          <div className="message-time">{time}</div>
        </div>
        {!isUser && (
          <div className="bot-avatar">
            ü§ñ
          </div>
        )}
      </div>
    )
  }

  // ===== RENDER MAIN CONTENT =====
  return (
    <Layout>
      <div className="chatbot-page">
        {/* HEADER */}
        <div className="chatbot-header">
          <h1>AI Assistant</h1>
          <div className="status-indicator">
            <div className="status-dot"></div>
            <span>Online</span>
          </div>
        </div>

        {/* CHAT CONTAINER */}
        <div className="chat-container">
          {/* MESSAGES AREA */}
          <div className="messages-area">
            {messages.map(renderMessage)}
            
            {/* TYPING INDICATOR */}
            {isTyping && (
              <div className="message bot-message">
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
                <div className="bot-avatar">ü§ñ</div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* QUICK QUESTIONS */}
          {messages.length <= 1 && (
            <div className="quick-questions">
              <h3>C√¢u h·ªèi th∆∞·ªùng g·∫∑p:</h3>
              <div className="quick-questions-grid">
                {quickQuestions.map((question, index) => (
                  <button
                    key={index}
                    className="quick-question-btn"
                    onClick={() => handleQuickQuestion(question)}
                  >
                    {question}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* INPUT AREA */}
          <div className="input-area">
            <form onSubmit={handleSendMessage} className="message-form">
              <div className="input-container">
                <textarea
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                  className="message-input"
                  rows="1"
                  disabled={isLoading}
                />
                <button
                  type="submit"
                  className="send-button"
                  disabled={!inputMessage.trim() || isLoading}
                >
                  {isLoading ? (
                    <div className="loading-spinner-small"></div>
                  ) : (
                    'üì§'
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </Layout>
  )
}

export default ChatbotPage
